* Gui
** Turn off menus
 #+begin_src emacs-lisp
(when (window-system)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1))
 #+end_src

** Themes and Fonts
#+begin_src emacs-lisp
(set-frame-font "Source Code Pro-13")
(load-theme 'solarized-dark t)
#+end_src

** General environment settings
#+begin_src emacs-lisp
(global-visual-line-mode t)   ;; breaks line text to other line
(delete-selection-mode t)     ;; deletes text select when typed over
(blink-cursor-mode t)         ;; blinking cursor

(setq make-backup-file nil)           ;; disables backup files
(setq auto-save-default nil)          ;; disable auto-save
(setq inhibit-startup-message t)      ;; disabel welcome message
(setq-default tab-width 2)            ;; sets tab to 2
(setq-default indent-tabs-mode nil)   ;; use spaces (not tabs)
(fset 'yes-or-no-p 'y-or-n-p)         ;; requires just y or n
#+end_src

* Org

** Global keybindings
   The four Org commands org-store-link, org-capture, org-agenda, and org-iswitchb
   should be accessible through global keys (i.e., anywhere in Emacs, not just in Org buffers).

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

** Org-bullets
   It puts a nice symbol instead of the usual asterisk on org-lists

#+begin_src emacs-lisp
(setq org-hide-leading-stars t)
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

#+BEGIN_SRC 

#+END_SRC

** Org-babel

#+begin_src emacs-lisp
 (setq org-src-fontify-natively t)
#+end_src

* General Packages Installed 
** Smart-mode-line
   Smart Mode Line is a sexy mode-line for Emacs.
   It aims to be easy to read from small to large monitors by using colors, a prefix feature, and smart truncation.    

#+begin_src emacs-lisp
 (sml/setup)
 (sml/apply-theme 'dark)
#+end_src

** Key-chord
Key-chord lets you bind commands to combination of key-strokes.
Here a “key chord” means two keys pressed simultaneously, or a single key quickly pressed twice. (*)

#+begin_src emacs-lisp
(key-chord-mode 1)
(key-chord-define-global "uu" 'undo)
#+end_src

** Expand-region
It expand region selecting region by semantic units (word, brackets, and so on).
C-= selection the word and starts the plugin, then = to expand, - to contract, and 0 to reset.

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src

** Aggresssive-indent
Minor mode that keeps your code always indented. It reindents after every command, making it more reliable than electric-indent-mode.

#+begin_src emacs-lisp
(global-aggressive-indent-mode 1)
#+end_src

** Smartparens

#+begin_src emacs-lisp
(require 'smartparens-config)
(smartparens-global-mode t)
(show-smartparens-global-mode t)
(setq sp-base-key-bindings 'paredit)
(setq sp-autoskip-closing-pair 'always)
(setq sp-hybrid-kill-entire-symbol nil)
(sp-use-paredit-bindings)
#+end_src

** YAsnippet

#+begin_src emacs-lisp
  (yas-global-mode t)
#+end_src

*** Org-mode fix
    The way Org mode binds the <TAB> key (binding to [tab] instead of "\t") overrules YASnippet's access to this key.
    The following code fixed this problem:

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (org-set-local 'yas/trigger-key [tab])
              (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
#+END_SRC

** Company
Company is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.
It comes with several back-ends such as Elisp, Clang, Semantic, Eclim, Ropemacs, Ispell, CMake, BBDB, Yasnippet, dabbrev, etags, gtags, files, keywords and a few others. 

#+begin_src emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+end_src

** Flycheck
Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs 24, intended as replacement for the older Flymake extension which is part of GNU Emacs.
It uses various syntax checking and linting tools to automatically check the contents of buffers while you type, and reports warnings and errors directly in the buffer, or in an optional error list.

#+begin_src emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
(require 'flycheck-tip)
(flycheck-tip-use-timer 'verbose)
#+end_src

** Dired+

#+begin_src emacs-lisp
  (require 'dired+)
  (setq dired-recursive-deletes (quote top))
  (define-key dired-mode-map (kbd "f") 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "^") (lambda ()
                                         (interactive)
                                         (find-alternate-file "..")))
#+end_src

** Magit

#+begin_src emacs-lisp
(set-default 'magit-stage-all-confirm nil)
(add-hook 'magit-mode-hook 'magit-load-config-extensions)

;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(global-unset-key (kbd "C-x g"))
(global-set-key (kbd "C-x g h") 'magit-log)
(global-set-key (kbd "C-x g f") 'magit-file-log)
(global-set-key (kbd "C-x g b") 'magit-blame-mode)
(global-set-key (kbd "C-x g m") 'magit-branch-manager)
(global-set-key (kbd "C-x g c") 'magit-branch)
(global-set-key (kbd "C-x g s") 'magit-status)
(global-set-key (kbd "C-x g r") 'magit-reflog)
(global-set-key (kbd "C-x g t") 'magit-tag)
#+end_src

** Ace-Jump
Ace jump mode is a minor mode of emacs, which help you to move the cursor within Emacs.
You can move your cursor to ANY position (across window and frame) in emacs by using only 3 times key press.
The keybinding is using key-chord-mode, mentioned previously.

#+begin_src emacs-lisp
(key-chord-define-global "jj" 'ace-jump-word-mode)
(key-chord-define-global "jl" 'ace-jump-line-mode)
#+end_src

** Projectile
Projectile is a project interaction library for Emacs. Its goal is to provide a
nice set of features operating on a project level without introducing external
dependencies(when feasible).  For instance - finding project files has a
portable implementation written in pure Emacs Lisp without the use of GNU find
(but for performance sake an indexing mechanism backed by external commands
exists as well).

#+begin_src emacs-lisp
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
(setq projectile-switch-project-action 'helm-projectile)
 #+end_src

** Helm
All the Helm configuration present here are originated from: http://tuhdo.github.io/index.html

Helm is incremental completion and selection narrowing framework for Emacs. It will help steer you in the right direction when you're looking for stuff in Emacs (like buffers, files, etc).

Helm is a fork of anything.el originally written by Tamas Patrovic and can be considered to be its successor. Helm sets out to clean up the legacy code in anything.el and provide a cleaner, leaner and more modular tool, that's not tied in the trap of backward compatibility.

#+begin_src emacs-lisp
(require 'helm)
(require 'helm-config)

;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(helm-mode 1)
(helm-autoresize-mode t)
(global-set-key (kbd "M-x") 'helm-M-x)
(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x b") 'helm-mini)
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)
(global-set-key (kbd "C-x C-f") 'helm-find-files)

;; Semantic-mode provides language-aware editing commands based on 'source code parsers'.
;; To activate it through helm-semantic-or-imenu press C-c-h-i
(semantic-mode 1)
(setq helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match    t)

#+end_src

* Custom Functions
** Text line wraps at column 80

#+begin_src emacs-lisp
(setq-default fill-column 80) ;; set 80 column display as default
#+end_src

** Remember the cursor position on file
#+begin_src emacs-lisp
(require 'saveplace)
(setq save-place-file (concat user-emacs-directory "saveplace.el"))
(setq-default save-place t)
#+end_src

** Select the line
   Custom function select-current-line selects the line (keybinding .l)

#+begin_src emacs-lisp
 (defun select-current-line ()
   "Selects the current line"
   (interactive)
   (end-of-line)
   (push-mark (line-beginning-position) nil t))

   (key-chord-define-global ".l" 'select-current-line)
#+end_src

** Insert line above
   Custom function line-above inserts a line above point (keybinding la)

#+begin_src emacs-lisp
 (defun line-above()
   "Pastes line above"
   (interactive)
   (move-beginning-of-line nil)
   (newline-and-indent)
   (forward-line -1)
   (indent-according-to-mode))

   (key-chord-define-global "la" 'line-above)
#+end_src

** Cut line or region
   Custom function cute-line-or-region cuts the current line if no selection is made or the selected region (keybinding lx)

#+begin_src emacs-lisp
 (defun cut-line-or-region()
   ""
   (interactive)
   (if (region-active-p)
       (kill-region (region-beginning) (region-end))
     (kill-region (line-beginning-position) (line-beginning-position 2))))

   (key-chord-define-global "lx" 'cut-line-or-region)
#+end_src

** Copy line or region
   Custom function copy-line-or-region copies the current line if no selection is made or the selected region (keybinding lc)

#+begin_src emacs-lisp
 (defun copy-line-or-region()
   ""
   (interactive)
   (if (region-active-p)
       (kill-ring-save (region-beginning) (region-end))
     (kill-ring-save (line-beginning-position) (line-beginning-position 2))))

   (key-chord-define-global "lc" 'copy-line-or-region)
#+end_src

** Duplicate line
   Custom function duplicates the current line or region (taken from Tuxicity) (keybinding ld)

#+begin_src emacs-lisp
 (defun duplicate-current-line-or-region (arg)
   "Duplicates the current line or region ARG times.
 If there's no region, the current line will be duplicated. However, if
 there's a region, all lines that region covers will be duplicated."
   (interactive "p")
   (let (beg end (origin (point)))
     (if (and mark-active (> (point) (mark)))
         (exchange-point-and-mark))
     (setq beg (line-beginning-position))
     (if mark-active
         (exchange-point-and-mark))
     (setq end (line-end-position))
     (let ((region (buffer-substring-no-properties beg end)))
       (dotimes (i arg)
         (goto-char end)
         (newline)
         (beginning-of-visual-line)
         (insert region)
         (setq end (point)))
       (goto-char (+ origin (* (length region) arg) arg)))))

   (key-chord-define-global "ld" 'duplicate-current-line-or-region)
#+end_src

* Cheatsheets
** Default and customized commands

 | Keybinding  | Description                                                 |
 |-------------+-------------------------------------------------------------|
 | C-h i       | Main help info                                              |
 | C-h k       | Shows help about keys                                       |
 | C-h f       | Show help about functions                                   |
 | C-x C-e     | Evaluate before point                                       |
 |-------------+-------------------------------------------------------------|
 | C-x C-f     | Open file                                                   |
 | C-x C-s     | Save current buffer                                         |
 | C-x C-w     | Save buffer to a different file (Save as)                   |
 |-------------+-------------------------------------------------------------|
 | C-f         | Move forward by caracter                                    |
 | M-f         | Move forward by word                                        |
 | C-b         | Mobe back by caracter                                       |
 | M-b         | Move back by word                                           |
 | C-p         | Move to previous line                                       |
 | C-n         | Move to next line                                           |
 | M-v         | Page up                                                     |
 | C-v         | Page down                                                   |
 | M-<         | Move to the beginning of the buffer                         |
 | M->         | Move to the end of the buffer                               |
 |-------------+-------------------------------------------------------------|
 | C-M-f       | Move forward to next balanced bracket                       |
 | C-M-b       | Move back to next balanced bracket                          |
 | C-M-k       | Kill text until the next balanced bracket                   |
 | C-M-t       | Transpose expressions (switch)                              |
 | C-M-SPC     | Select text until next balanced bracket                     |
 |-------------+-------------------------------------------------------------|
 | C-d         | Kill a character at point                                   |
 | C-S-DEL     | Kill entire line                                            |
 | M-d         | Kill forward to the end of a word from current point        |
 | M-DEL       | Kill backward to the beginning of a word from current point |
 | M-\         | Kill all spaces at point                                    |
 | M-SPC       | Kill all spaces except one at point                         |
 | C-k         | Kill to the end of line                                     |
 | M-k         | Kill a sentence                                             |
 | C-w         | Cut selection to kill-ring                                  |
 | M-w         | Copy selection to kill-ring                                 |
 | C-y         | Paste last killed item                                      |
 | M-y         | Load helm-show-kill-ring (M-y remapped)                     |
 |-------------+-------------------------------------------------------------|
 | M-;         | Automatic indentation                                       |
 | uu / C-_    | Undo                                                        |
 | M-%         | Search and replace                                          |
 |-------------+-------------------------------------------------------------|
 | C-x 0       | Close the current window                                    |
 | C-x 1       | Close all windows, except the current one                   |
 | C-x 2       | Create a horizontal window                                  |
 | C-x 3       | Create a vertical window                                    |
 | C-x o       | Move cursor to next window                                  |
 | C-x C-b     | Show buffers list                                           |
 | C-x b       | Switch to especified buffer                                 |
 | C-x k       | Kill the current buffer                                     |
 |-------------+-------------------------------------------------------------|
 | C-SPC       | Start selection                                             |
 | C-x x       | Move between start and end mark selection                   |
 | C-SPC C-SPC | Create mark (used as temporary bookmark)                    |
 | C-u C-SPC   | Go back to the last mark created                            |
 | C-x h       | Select the whole buffer                                     |
 | C-=         | Load expand-region plugin (= expands,- contracts, 0 resets) |
 |-------------+-------------------------------------------------------------|
 | ll          | Select current line                                         |
 | la          | Insert line above current line                              |
 | lx          | Cut current line or selected region                         |
 | lc          | Copy current line or selected region                        |
 | ld          | Duplicate current line or selected region                   |
 | jj          | Ace-jump-word-mode to letter anywhere                       |
 | jl          | Ace-jump-line-mode to beginning of lines                    |
 |-------------+-------------------------------------------------------------|
 | C-x r SPC   | Mark point in the register                                  |
 | C-s r j     | Jump back to mark contained in register                     |
 | C-x r s     | Save text to register                                       |
 | C-x r i     | Insert text from register at point                          |
 |             | Append text to saved register (M-x append-to-register)      |
 | C-x r m     | Create a bookmark to the file                               |
 | C-x r b     | Jump back to bookmark                                       |
 | C-x r l     | List all saved bookmark                                     |
 |-------------+-------------------------------------------------------------|
 | C-x d       | Start Dired                                                 |
 | C-x 4 d     | Stard Dired in another window                               |
 | n           | Move to next entry below point                              |
 | p           | Move to previous entry below poing                          |
 | j           | Jump to file specified                                      |
 | +           | Create a new directory                                      |
 | f / e / RET | Open current file at point.                                 |
 | o           | Open file at point in another window.                       |
 | v           | Open file for read only.                                    |
 | S-6         | Go up one level                                             |
 | d           | Mark file for deletion                                      |
 | R           | Rename file                                                 |
 | r           | Move file                                                   |
 | m           | Mark files for future operation                             |
 | C           | Copy marked files to another directory                      |
 | u           | Undo marks inserted on file                                 |
 | %           | Press before command allows to insert expressions (eg. %d)  |
 | x           | Execute commands set by marks inserted                      |
 | C-s         | Find text using Isearch                                     |
 |-------------+-------------------------------------------------------------|

** Projectile Cheatsheet

| Key Binding | Command                                     | Description                                                  |
|-------------+---------------------------------------------+--------------------------------------------------------------|
| C-c p h     | helm-projectile                             | Helm interface to projectile                                 |
| C-c p p     | helm-projectile-switch-project              | Switches to another projectile project                       |
| C-c p f     | helm-projectile-find-file                   | Lists all files in a project                                 |
| C-c p F     | helm-projectile-find-file-in-known-projects | Find file in all known projects                              |
| C-c p g     | helm-projectile-find-file-dwim              | Find file based on context at point                          |
| C-c p d     | helm-projectile-find-dir                    | Lists available directories in current project               |
| C-c p e     | helm-projectile-recentf                     | Lists recently opened files in current project               |
| C-c p a     | helm-projectile-find-other-file             | Switch between files with same name but different extensions |
| C-c p i     | projectile-invalidate-cache                 | Invalidate cache                                             |
| C-c p z     | projectile-cache-current-file               | Add the file of current selected buffer to cache             |
| C-c p b     | helm-projectile-switch-to-buffer            | List all open buffers in current project                     |
| C-c p s g   | helm-projectile-grep                        | Searches for symbol starting from project root               |
| C-c p s a   | helm-projectile-ack                         | Same as above but using ack                                  |
| C-c p s s   | helm-projectile-ag                          | Same as above but using ag                                   |

** Helm Cheatsheet

| Key Binding | Command                         | Description                                                                 |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| M-x         | helm-M-x                        | List commands                                                               |
| M-y         | helm-show-kill-ring             | Shows the content of the kill ring                                          |
| C-x b       | helm-mini                       | Shows open buffers, recently opened files                                   |
| C-x C-f     | helm-find-files                 | The helm version for find-file                                              |
| C-s         | helm-ff-run-grep                | Run grep from within helm-find-files                                        |
| C-c h i     | helm-semantic-or-imenu          | Helm interface to semantic/imenu                                            |
| C-c h m     | helm-man-woman                  | Jump to any man entry                                                       |
| C-c h /     | helm-find                       | Helm interface to find                                                      |
| C-c h l     | helm-locate                     | Helm interface to locate                                                    |
| C-c h o     | helm-occur                      | Similar to occur                                                            |
| C-c h a     | helm-apropos                    | Describes commands, functions, variables, …                                 |
| C-c h h g   | helm-info-gnus                  |                                                                             |
| C-c h h i   | helm-info-at-point              |                                                                             |
| C-c h h r   | helm-info-emacs                 |                                                                             |
| C-c h <tab> | helm-lisp-completion-at-point   | Provides a list of available functions                                      |
| C-c h b     | helm-resume                     | Resumes a previous helm session                                             |
| C-h SPC     | helm-all-mark-rings             | Views content of local and global mark rings                                |
| C-c h r     | helm-regex                      | Visualizes regex matches                                                    |
| C-c h x     | helm-register                   | Shows content of registers                                                  |
| C-c h t     | helm-top                        | Helm interface to top                                                       |
| C-c h s     | helm-surfraw                    | Command line interface to many web search engines                           |
| C-c h g     | helm-google-suggest             | Interactively enter search terms and get results from Google in helm buffer |
| C-c h c     | helm-color                      | Lists all available faces                                                   |
| C-c h M-:   | helm-eval-expression-with-eldoc | Get instant results for emacs lisp expressions in the helm buffer           |
| C-c h C-,   | helm-calcul-expression          | Helm interface to calc                                                      |
| C-c C-l     | helm-eshell-history             | Interface to eshell history                                                 |
| C-c C-l     | helm-comint-input-ring          | Interface to shell history                                                  |
| C-c C-l     | helm-mini-buffer-history        | Interface to mini-buffer history                                            |

