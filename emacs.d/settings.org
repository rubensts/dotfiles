* Evil
Evil is an extensible vi layer for Emacs. It emulates the main features of Vim,
and provides facilities for writing custom extensions.

| Binding | Call                        | Do                                      |
|---------+-----------------------------+-----------------------------------------|
| C-z     | evil-emacs-state            | Toggle evil-mode                        |
| \       | evil-execute-in-emacs-state | Execute the next command in emacs state |

#+BEGIN_SRC emacs-lisp
(setq evil-shift-width 4)
(require 'evil)
(evil-mode 1)
#+END_SRC

** ESC quits almost everywhere
   Gotten from here, trying to emulate the Vim behaviour

#+BEGIN_SRC emacs-lisp
;;; esc quits
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC
i
** Change cursor color depending on mode

#+BEGIN_SRC emacs-lisp
(setq evil-emacs-state-cursor '("red" box))
(setq evil-normal-state-cursor '("lawn green" box))
(setq evil-visual-state-cursor '("orange" box))
(setq evil-insert-state-cursor '("deep sky blue" bar))
(setq evil-replace-state-cursor '("red" bar))
(setq evil-operator-state-cursor '("red" hollow))
#+END_SRC

** Org-mode customization
   Custom bindings for Org-mode.

#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)
(evil-define-key 'normal org-mode-map (kbd "H") 'org-metaleft)
(evil-define-key 'normal org-mode-map (kbd "L") 'org-metaright)
(evil-define-key 'normal org-mode-map (kbd "K") 'org-metaup)
(evil-define-key 'normal org-mode-map (kbd "J") 'org-metadown)
(evil-define-key 'normal org-mode-map (kbd "U") 'org-shiftmetaleft)
(evil-define-key 'normal org-mode-map (kbd "I") 'org-shiftmetaright)
(evil-define-key 'normal org-mode-map (kbd "O") 'org-shiftmetaup)
(evil-define-key 'normal org-mode-map (kbd "P") 'org-shiftmetadown)
(evil-define-key 'normal org-mode-map (kbd "t")   'org-todo)
(evil-define-key 'normal org-mode-map (kbd "-")   'org-cycle-list-bullet)

(evil-define-key 'insert org-mode-map (kbd "C-c .")
  '(lambda () (interactive) (org-time-stamp-inactive t)))
#+END_SRC

** Evil plugins

*** evil-exchange
    Evil-exchange is an easy text exchange operator for Evil. This is the port of vim-exchange by Tom McDonald.

| Binding | Call                 | Do                                                    |
|---------+----------------------+-------------------------------------------------------|
| gx      | evil-exchange        | Define (and highlight) the first {motion} to exchange |
| gX      | evil-exchange-cancel | Clear any {motion} pending for exchange.              |

#+BEGIN_SRC emacs-lisp
(require 'evil-exchange)
(evil-exchange-install)
#+END_SRC

*** evil-surround
    Use the evil-surround plugin, the equivalent to the Vim one.
#+BEGIN_SRC emacs-lisp
(require 'evil-surround)
(global-evil-surround-mode 1)
#+END_SRC

*** evil-nerd-commenter
    Comment/uncomment lines efficiently. Like Nerd Commenter in Vim Repository
#+BEGIN_SRC emacs-lisp
(require 'evil-nerd-commenter)
#+END_SRC

*** evil-matchit
    Use the Matchit plugin, the equivalent to the Vim one.
#+BEGIN_SRC emacs-lisp
(require 'evil-matchit)
(global-evil-matchit-mode 1)
#+END_SRC

*** evil-indent-textobject
    Textobject for evil based on indentation, repository
#+BEGIN_SRC emacs-lisp
(require 'evil-indent-textobject)
#+END_SRC
*** Leader key
    Evil Leader provides the <leader> feature from Vim that provides an easy way
    to bind keys under a variable prefix key. For an experienced Emacs User it
    is nothing more than a convoluted key map, but for a Evil user coming from
    Vim it means an easier start.

    The prefix C-<leader> allows to use it in those modes where evil is not in
    normal state (e.g. magit)

| Binding    | Do                                           |
|------------+----------------------------------------------|
| ,          | Leader key                                   |
| C-<leader> | Prefix + Leader key when not in normal state |
| .          | Repeat last leader command                   |

#+BEGIN_SRC emacs-lisp
(require 'evil-leader)
(global-evil-leader-mode)
(setq evil-leader/in-all-states 1)
(evil-leader/set-leader ",")
(setq echo-keystrokes 0.02)
#+END_SRC
