* Start
** Installation
   For now I'm using GNU Emacs snapshot builds without the --HEAD option on the install,
   which would install the most cutting edge version (25.0.50 as on 02/Fev/2015).
   Better to keep it with the stable version for now (24.4)

   Two options are worth using on OSX:
   - GNU Emacs snapshot builds
     It can be installed by homebrew:

     $ brew install emacs --HEAD --use-git-head --cocoa --with-gnutls --with-librsvg --with-imagemagick

   - Emacs Mac Port (https://github.com/railwaycat/emacs-mac-port)
     It can be installed by homebrew:

     $ brew tap railwaycat/emacsmacport
     $ brew install emacs-mac

   Then to have launchd start emacs at login:
   $ ln -sfv /usr/local/opt/emacs/*.plist ~/Library/LaunchAgents

   source: http://emacs.stackexchange.com/questions/271/what-is-the-difference-between-aquamacs-and-other-mac-versions-of-emacs
   source: http://www.reddit.com/r/emacs/comments/195163/hey_mac_users/

** Source for Ideas
   A good place to start checking settings for Emacs is at: https://github.com/joedicastro/dotfiles/tree/master/emacs
   To understand better how this config file works whatch Venture into Emacs.

* Gui
** Turn off menus

#+begin_src emacs-lisp
  (when (window-system)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))
#+end_src

** Splash Screen
   Turns off the splash screen and goes straight into the scratch buffer. It
   turn off the initial scratch buffer message and sets Python as the initial
   mode.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        initial-scratch-message nil
        initial-major-mode 'org-mode)
#+END_SRC

** Themes and Fonts

#+begin_src emacs-lisp
  (set-frame-font "Source Code Pro-12")
  (load-theme 'solarized-dark t)
  ;(load-theme 'zenburn)
  ;(load-theme 'naquadah t)
  ;(load-theme 'misterioso t)
#+end_src

** Fullscreen
   This works on OSX. Introduced on Emacs 24.4

#+BEGIN_SRC emacs-lisp
;  (toggle-frame-fullscreen)
#+END_SRC

* General Environment Settings
  Usually in configuration files *nil* and *t* for *false* and *true*, respectively.
  This apparently does not work in Cocoa Emacs. Replace nil with -1 and t with 1 and
  this should fix configuration options that seem to have stopped working.

#+begin_src emacs-lisp
  ;; Check if system is Mac or Linux for keeping compatibility
  (defun system-is-mac ()
    (interactive)
    (string-equal system-type "darwin"))

  (defun system-is-linux ()
    (interactive)
    (string-equal system-type "gnu/linux"))

  ;; set command key to be meta instead of option
  (if (system-is-mac)
     (setq ns-command-modifier 'meta))

  (setenv "LANG" "en_US")       ; set languase to en_US - solve ESS warning messages

  ;; Set default coding system to Unicode
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  (global-visual-line-mode t)   ;; breaks line text to other line
  (delete-selection-mode t)     ;; deletes text select when typed over
  (blink-cursor-mode t)         ;; blinking cursor

  (setq make-backup-files nil)          ;; disables backup files
  (setq auto-save-default t)            ;; disable auto-save
  (setq-default tab-width 2)            ;; sets tab to 2
  (setq-default indent-tabs-mode nil)   ;; use spaces (not tabs)
  (fset 'yes-or-no-p 'y-or-n-p)         ;; requires just y or n
  (setq x-select-enable-clipboard t)    ;; kill-ring accepts system clipboard

  (setq echo-keystrokes 0.1
      use-dialog-box nil
      visible-bell t)

  ;; Temporary files management
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

  (which-function-mode t)               ;; show the current function
  (global-prettify-symbols-mode t)       ;; use mathematical Unicode symbols instead of expressions
  (add-hook 'prog-mode-hook 'linum-mode) ;; line number only on programming modes
  (add-hook 'before-save-hook 'whitespace-cleanup) ;; remove trailing whitespace before saving file

  ;; set browser as the default browser on the system (for mac)
  (if (system-is-mac)
     (setq browse-url-browser-function 'browse-url-default-macosx-browser))
#+end_src

* General Packages Installed
** Diminish
   A diminished mode is a minor mode that has had its mode line
   display diminished, usually to nothing, although diminishing to a
   shorter word or a single letter is also supported.  This package
   implements diminished modes.

#+BEGIN_SRC emacs-lisp
(require 'diminish)
(eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
(eval-after-load "eldoc" '(diminish 'eldoc-mode))
(eval-after-load "autopair" '(diminish 'autopair-mode))
(eval-after-load "abbrev" '(diminish 'abbrev-mode "Abv"))
(eval-after-load "company" '(diminish 'company-mode))
(eval-after-load "js2-highlight-vars" '(diminish 'js2-highlight-vars-mode))
(eval-after-load "projectile" '(diminish 'projectile-mode))
(eval-after-load "highlight-parentheses" '(diminish 'highlight-parentheses-mode))
(eval-after-load "anzu" '(diminish 'anzu-mode))
(eval-after-load "smartparens" '(diminish 'smartparens-mode))
;; (eval-after-load "magit" '(diminish 'magit-auto-revert-mode))
#+END_SRC

** Anzu
   anzu.el is an Emacs port of anzu.vim. anzu.el provides a minor mode
   which displays current match and total matches information in the
   mode-line in various search modes.

#+BEGIN_SRC emacs-lisp
(anzu-mode +1)
(global-anzu-mode +1)
(global-set-key (kbd "M-%") 'anzu-query-replace)
(global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)
#+END_SRC

** Smart-mode-line
   Smart Mode Line is a sexy mode-line for Emacs.
   It aims to be easy to read from small to large monitors by using colors, a prefix feature, and smart truncation.

#+begin_src emacs-lisp
 (sml/setup)
 (sml/apply-theme 'automatic)
 ;; abbreviate folder names
 (add-to-list 'sml/replacer-regexp-list '("^~/Projects" ":Proj:") t)
 (add-to-list 'sml/replacer-regexp-list '("^:Proj:/git" ":Git:") t)
 (add-to-list 'sml/replacer-regexp-list '("^:Git:/dotfiles" ":Dot:") t)
 (add-to-list 'sml/replacer-regexp-list '("^:Dot:/emacs.d" ":ED:") t)
 (add-to-list 'sml/replacer-regexp-list '("^~/Copy" ":CP:") t)
#+end_src

** Aggresssive-indent
Minor mode that keeps your code always indented. It reindents after every
command, making it more reliable than electric-indent-mode.

#+begin_src emacs-lisp
(global-aggressive-indent-mode 1)
#+end_src

** Smartparens

#+begin_src emacs-lisp
(require 'smartparens-config)
(smartparens-global-mode t)
(show-smartparens-global-mode t)
(setq sp-base-key-bindings 'paredit)
(setq sp-autoskip-closing-pair 'always)
(setq sp-hybrid-kill-entire-symbol nil)
(sp-use-paredit-bindings)

;; evil-smartparens makes smartparens and evil-mode play nicely together
;;(add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)
#+end_src

** YAsnippet

#+begin_src emacs-lisp
  (yas-global-mode t)
#+end_src

*** Org-mode fix
    The way Org mode binds the <TAB> key (binding to [tab] instead of "\t") overrules YASnippet's access to this key.
    The following code fixed this problem:

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (org-set-local 'yas/trigger-key [tab])
              (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
#+END_SRC

** Company
   Company is a text completion framework for Emacs. The name stands for "complete
   anything". It uses pluggable back-ends and front-ends to retrieve and display
   completion candidates.  It comes with several back-ends such as Elisp, Clang,
   Semantic, Eclim, Ropemacs, Ispell, CMake, BBDB, Yasnippet, dabbrev, etags,
   gtags, files, keywords and a few others.

#+begin_src emacs-lisp
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

** Flycheck
   Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs 24,
   intended as replacement for the older Flymake extension which is part of GNU
   Emacs.  It uses various syntax checking and linting tools to automatically check
   the contents of buffers while you type, and reports warnings and errors directly
   in the buffer, or in an optional error list.

#+begin_src emacs-lisp
  (add-hook 'after-init-hook #'global-flycheck-mode)
  ;(require 'flycheck-tip)
  ;(flycheck-tip-use-timer 'verbose)
  (add-hook 'prog-mode-hook 'flycheck-mode)
#+end_src

** Iedit
   Iedit - Edit multiple regions in the same way simultaneously.
   Here it is improved to take the word at point and only iedit occurrences in the local defun
   instead of the default behaviour that iedit occurrences in the whole buffer.
   iedit site: https://github.com/victorhge/iedit
   improved code site: http://www.masteringemacs.org/article/iedit-interactive-multi-occurrence-editing-in-your-buffer

#+BEGIN_SRC emacs-lisp
;(defun iedit-dwim (arg)
;  "Starts iedit but uses \\[narrow-to-defun] to limit its scope."
;  (interactive "P")
;  (if arg
;      (iedit-mode)
;    (save-excursion
;      (save-restriction
;        (widen)
;        ;; this function determines the scope of `iedit-start'.
;        (if iedit-mode
;            (iedit-done)
;          ;; `current-word' can of course be replaced by other
;          ;; functions.
;          (narrow-to-defun)
;          (iedit-start (current-word) (point-min) (point-max)))))))
;
;(global-set-key (kbd "C-;") 'iedit-dwim)

;; Fixing a key binding bug between iedit mode and yelp-mode (Python)
;(define-key global-map (kbd "C-c o") 'iedit-mode)
#+END_SRC

** Dash
   Dash provides documentation for several languages.

#+begin_src emacs-lisp
  (if (system-is-mac)
      (autoload 'dash-at-point "dash-at-point"
                "Search the word at point with Dash." t nil)
      (global-set-key "\C-cd" 'dash-at-point)
      (global-set-key "\C-ce" 'dash-at-point-with-docset))
#+end_src

** Dired

#+begin_src emacs-lisp
  (require 'dired+)
  (setq dired-recursive-deletes (quote top))
  (define-key dired-mode-map (kbd "f") 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "^") (lambda ()
                                         (interactive)
                                         (find-alternate-file "..")))

  ;;Stripe Dired buffers
  (require 'stripe-buffer)
  (add-hook 'org-mode-hook 'org-table-stripes-enable)
  (add-hook 'dired-mode-hook 'stripe-listify-buffer)
#+END_SRC

** Magit

#+begin_src emacs-lisp
  (set-default 'magit-stage-all-confirm nil)
  (add-hook 'magit-mode-hook 'magit-load-config-extensions)

  ;; full screen magit-status
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (global-unset-key (kbd "C-x g"))
  (global-set-key (kbd "C-x g h") 'magit-log)
  (global-set-key (kbd "C-x g f") 'magit-file-log)
  (global-set-key (kbd "C-x g b") 'magit-blame-mode)
  (global-set-key (kbd "C-x g m") 'magit-branch-manager)
  (global-set-key (kbd "C-x g c") 'magit-branch)
  (global-set-key (kbd "C-x g s") 'magit-status)
  (global-set-key (kbd "C-x g r") 'magit-reflog)
  (global-set-key (kbd "C-x g t") 'magit-tag)
#+end_src

** Smooth scrolling
   Using the combination of smooth-scrolling(used in Spacemacs) and smooth-scrooll.
   check: https://github.com/syl20bnr/spacemacs/issues/1781

#+BEGIN_SRC emacs-lisp
;; smooth-scrolling config
(setq scroll-margin 5
scroll-conservatively 9999
scroll-step 1)

;; smooth-scroll config
(require 'smooth-scroll) ;; Smooth scroll
(smooth-scroll-mode 1) ;; Enable it
(setq smooth-scroll/vscroll-step-size 5) ;; Set the speed right
#+END_SRC
** Volatile Highlights
   This library provides minor mode `volatile-highlights-mode’, which
   brings visual feedback to some operations by highlighting portions
   relating to the operations.

   All of highlights made by this library will be removed when any new
   operation is executed.

#+BEGIN_SRC emacs-lisp
(require 'volatile-highlights)
(volatile-highlights-mode t)
#+END_SRC

** Conkeror
   Mode for editing conkeror javascript files.

   Currently, this minor-mode defines:

   1. A function for sending current javascript statement to be evaluated by
      conkeror. This function is eval-in-conkeror bound to C-c C-c.
   2. Syntax coloring.
   3. Indentation according to Conkeror Guidelines.
   4. Warning colors when anything in your code is not compliant with Conkeror
      Guidelines. If you find this one excessive, you can set
      conkeror-warn-about-guidelines to nil.

#+BEGIN_SRC emacs-lisp
  (add-hook 'js-mode-hook (lambda ()
                            (when (string-match "conkeror" (buffer-file-name))
                              (conkeror-minor-mode 1))))
#+END_SRC
* Org
** Loading additional org modules

#+begin_src emacs-lisp
  (require 'org-protocol)
  (require 'org-bullets)
  (require 'org-notmuch)
  (require 'org-drill)
  (require 'ox-latex)
  (require 'ox-beamer)
  (require 'ox-odt)
  (require 'ox-html)
  (require 'ox-deck)
  (require 'ox-publish)
  (require 'ox-bibtex)
  (require 'ox-koma-letter)
  (require 'ox-reveal)
#+end_src

** A few sane customisations

#+begin_src emacs-lisp
  (setq org-export-with-smart-quotes t)
  '(org-cycle-include-plain-lists t)
  '(org-alphabetical-lists t)
#+end_src

** Global keybindings
   The four Org commands org-store-link, org-capture, org-agenda, and org-iswitchb
   should be accessible through global keys (i.e., anywhere in Emacs, not just in Org buffers).

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

** Org-bullets
   It puts a nice symbol instead of the usual asterisk on org-lists

#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** Code blocks
   Babel is Org-mode’s ability to execute source code within Org-mode documents.

#+begin_src emacs-lisp
;; languages supported
(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote (
         (calc . t)
         (clojure . t)
         (ditaa . t)
         (dot . t)
         (emacs-lisp . t)
         (gnuplot . t)
         (latex . t)
         (ledger . t)
         (octave . t)
         (org . t)
         (makefile . t)
         (plantuml . t)
         (python . t)
         (R . t)
         (ruby . t)
         (sh . t)
         (sqlite . t)
         (sql . nil))))
;(setq org-babel-python-command "python2")
#+end_src

** Code block fontification
The following displays the contents of code blocks in Org-mode files using
the major-mode of the code. It also changes the behavior of TAB to as if it
were used in the appropriate major mode. This means that reading and editing
code form inside of your Org-mode files is much more like reading and editing
of code using its major mode.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
#+END_SRC

   Don’t ask for confirmation on every C-c C-c code-block compile.

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

** Babel Settings
Configure org-mode so that when you edit source code in an indirect buffer
(with C-c ‘), the buffer is opened in the current window. That way, your
window organization isn’t broken when switching.

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

** Archive Settings
   Where archived projects and tasks go.

#+BEGIN_SRC emacs-lisp
(setq org-archive-location "~/prj/org/archive.org::From %s")
#+END_SRC

** Mobile Settings
   Sync orgmode files with Copy/Dropbox and iPhone. #+src-name: orgmode-mobile

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Copy/Org")
(setq org-mobile-directory "~/Copy/MobileOrg")
;; Set to the files (or directory of files) you want sync'd
(setq org-agenda-files (quote ("~/Copy/Org")))
;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "~/Copy/Org/from-mobile.org")
#+END_SRC

** Org-latex-preview
   There are two methods used to preview Latex fragments on org files:
   dvipng and imagemagick. Dvipng conflicts with minted, which is used
   to highlight code blocks when exported, so imagemagick is used here.

   To show latex fragments: C-c C-x C-l and to get rid of it: C-c C-c

#+BEGIN_SRC emacs-lisp
  (setq org-latex-create-formula-image-program 'imagemagick)
#+END_SRC

** Exporters
*** XeLaTeX and pdfLaTeX Export Settings
    In order to use Minted for highlight code blocks, Pygments has to be installed:
    $ pip install Pygments

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)

  ;; This defines the variables minted uses for beautiful code-blocks.
  ;; Without this, the code-blocks will just look like inline text.
  (setq org-latex-minted-options
        '(("frame" "lines")
          ("framesep" "2mm")
          ("baselinestretch" "1.2")
          ("bgcolor" "mintedbg")
          ("mathescape" "true")
          ("linenos" "")
          ("fontsize" "\\footnotesize")))

  ;; LaTeX compilation command. For orgmode docs we just always use xelatex for convenience.
  ;; You can change it to pdflatex if you like, just remember to make the adjustments to the packages-alist below.
  (setq org-latex-pdf-process
        '("latexmk -pdflatex='xelatex -synctex=1 --shell-escape' -pdf %f"))

  ;; Sets the structure of the document to be Latex Koma-article by default
  (unless (boundp 'org-latex-classes)
        (setq org-latex-classes nil))
  (add-to-list 'org-latex-classes
               '("koma-article"
                 "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  ;; To use the stardard Latex article design the class has to be included in the org file as:
  ;; #+LaTeX_CLASS: article
  ;; source: http://orgmode.org/worg/org-tutorials/org-latex-export.html
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass{article}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

 ;; As above, but to use Memoir design, set memarticle in the org file
  (add-to-list 'org-latex-classes
               '("memarticle"
                 "\\documentclass{memoir}"
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

* Evil

#+begin_src emacs-lisp
(require 'evil)
(evil-mode 1)

;; Change cursor color depending on mode
(setq evil-emacs-state-cursor '("red" box))
(setq evil-normal-state-cursor '("green" box))
(setq evil-visual-state-cursor '("orange" box))
(setq evil-insert-state-cursor '("red" bar))
(setq evil-replace-state-cursor '("red" bar))
(setq evil-operator-state-cursor '("red" hollow))
#+end_src

* Helm
   All the Helm configuration present here are originated from:
   http://tuhdo.github.io/index.html

   Helm is incremental completion and selection narrowing framework for
   Emacs. It will help steer you in the right direction when you're looking for
   stuff in Emacs (like buffers, files, etc).

   Helm is a fork of anything.el originally written by Tamas Patrovic and can be
   considered to be its successor. Helm sets out to clean up the legacy code in
   anything.el and provide a cleaner, leaner and more modular tool, that's not
   tied in the trap of backward compatibility.

** Helm Configuration

#+begin_src emacs-lisp
  (require 'helm)
  (require 'helm-config)

  (helm-autoresize-mode t)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (setq helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match    t)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)

  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  (define-key helm-map (kbd "C-z") 'helm-select-action) ; list actions using C-z

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t)

  (helm-mode 1)

  ;; Semantic-mode provides language-aware editing commands based on 'source code parsers'.
  ;; To activate it through helm-semantic-or-imenu press C-c-h-i
  (semantic-mode 1)
  (setq helm-semantic-fuzzy-match t
        helm-imenu-fuzzy-match    t)

  ;; Helm-company - Helm interface for company-mode
  (eval-after-load 'company
    '(progn
       (define-key company-mode-map (kbd "C-:") 'helm-company)
       (define-key company-active-map (kbd "C-:") 'helm-company)))
#+end_src

** Projectile
Projectile is a project interaction library for Emacs. Its goal is to provide a
nice set of features operating on a project level without introducing external
dependencies(when feasible).  For instance - finding project files has a
portable implementation written in pure Emacs Lisp without the use of GNU find
(but for performance sake an indexing mechanism backed by external commands
exists as well).

#+begin_src emacs-lisp
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
(setq projectile-switch-project-action 'helm-projectile)
(setq projectile-enable-caching t)
#+end_src
* Latex
** In-text Smart Quotes (XeLaTeX only)
   Redefine TeX-open-quote and TeX-close-quote to be smart quotes by
   default. Below, in the local org-mode settings, we’ll also map the relevant
   function to a key we can use in org-mode, too. If you don’t use XeLaTeX for
   processing all your .tex files, you should disable this option.

#+BEGIN_SRC emacs-lisp
  (setq TeX-open-quote "“")
  (setq TeX-close-quote "”")
#+END_SRC

** SyncTeX, PDF mode, Skim
   Set up AUCTeX to work with the Skim PDF viewer.

#+BEGIN_SRC emacs-lisp
  ;; Synctex with Skim
  (add-hook 'TeX-mode-hook
  (lambda ()
  (add-to-list 'TeX-output-view-style
  '("^pdf$" "."
   "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b"))))

  (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
  (setq TeX-view-program-list
       '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

  ;; Make emacs aware of multi-file projects
  ;; (setq-default TeX-master nil)

  ;; Auto-raise Emacs on activation (from Skim, usually)
  (defun raise-emacs-on-aqua()
  (shell-command "osascript -e 'tell application \"Emacs\" to activate' &"))
  (add-hook 'server-switch-hook 'raise-emacs-on-aqua)
#+END_SRC

** Auctex
   Setting Skim as default pdf viewer and latexmk as latex engine.
   site: http://www.stefanom.org/setting-up-a-nice-auctex-environment-on-mac-os-x/

#+BEGIN_SRC emacs-lisp
  ;; AucTeX
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-PDF-mode t)

  ;; Use Skim as viewer, enable source <-> PDF sync
  ;; make latexmk available via C-c C-c
  ;; Note: SyncTeX is setup via ~/.latexmkrc (see below)
;  (add-hook 'LaTeX-mode-hook (lambda ()
;  (push
;  '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
;  :help "Run latexmk on file")
;  TeX-command-list)))
;  (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))

  ;; use Skim as default pdf viewer
  ;; Skim's displayline is used for forward search (from .tex to .pdf)
  ;; option -b highlights the current line; option -g opens Skim in the background
;  (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
;  (setq TeX-view-program-list
;  '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
#+END_SRC

** Local Pandoc Support
   A pandoc menu for markdown and tex files. #+src-name: pandoc_mode

#+BEGIN_SRC emacs-lisp
  (load "pandoc-mode")
  (add-hook 'markdown-mode-hook 'pandoc-mode)
  (add-hook 'TeX-mode-hook 'pandoc-mode)
  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
#+END_SRC
* Email
  E-mail is set using the following applications:
  - to retrieve: isync(mbsync)
  - to send: msmtp
  - to index and search: notmuch
  - to read (frontend): notmuch-mode on Emacs

  Details about configurations can be find at:
  http://notmuchmail.org/initial_tagging/
  http://notmuchmail.org/emacstips/
  http://chrisdone.com/posts/emacs-mail
  http://foivos.zakkak.net/tutorials/using_emacs_and_notmuch_mail_client.html
  https://www.bostonenginerd.com/posts/notmuch-of-a-mail-setup-part-1-mbsync-msmtp-and-systemd/
  http://dbp.io/essays/2013-06-29-hackers-replacement-for-gmail.html
  http://www.ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html
  https://wiki.archlinux.org/index.php/Msmtp
  http://pbrisbin.com/posts/mutt_gmail_offlineimap/
  http://baron.vc/using-gmailimap-backups-for-super-fast-email/
  http://bloerg.net/2013/10/09/syncing-mails-with-mbsync-instead-of-offlineimap.html
  https://chrisstreeter.com/archive/2009/04/gmail-imap-backup-with-mbsync-on-ubuntu.html
  https://blog.rectalogic.com/2007/11/automated-gmail-backup-via-imap.html
  http://www.monperrus.net/martin/backup-imap
  http://emacs-berlin.org/20140327.html
  http://lwn.net/Articles/586992/
  http://stew.vireo.org/dotemacs/#sec-9

#+BEGIN_SRC emacs-lisp
  (require 'notmuch)     ; loads notmuch package
  (setq message-kill-buffer-on-exit t) ; kill buffer after sending mail)
  (setq mail-specify-envelope-from t) ; Settings to work with msmtp
                                          ;  (setq message-sendmail-envelope-from header)
                                          ;  (setq mail-envelope-from header)
  (setq notmuch-fcc-dirs "sent-mail") ; stores sent mail to the specified directory
  (setq message-directory "drafts") ; stores postponed messages to the specified directory

  ;; Completion selection with helm
  (setq notmuch-address-selection-function
        (lambda (prompt collection initial-input)
          (completing-read prompt (cons initial-input collection) nil t nil 'notmuch-address-history)))

  ;; Customized searches
  (setq notmuch-saved-searches '((:name "inbox"
                                        :query "tag:inbox and not tag:delete"
                                        :count-query "tag:inbox and tag:unread"
                                        :sort-order 'oldest-first)
                                 (:name "classes"
                                        :query "tag:classes and not tag:delete"
                                        :count-query "tag:classes and tag:unread")))
#+END_SRC

* Elfeed
  Elfeed is an extensible web feed reader for Emacs, supporting both Atom and
  RSS. Elfeed was inspired by notmuch.

  info: http://nullprogram.com/blog/2013/09/04/
  tips&tricks: http://nullprogram.com/blog/2013/11/26/

  | g   | refresh view of the feed listing                     |
  | G   | fetch feed updates from the servers                  |
  | s   | update the search filter (see tags)                  |
  | RET | view selected entry in a buffer                      |
  | b   | open selected entries in your browser (`browse-url`) |
  | y   | copy selected entries URL to the clipboard           |
  | r   | mark selected entries as read                        |
  | u   | mark selected entries as unread                      |
  | +   | add a specific tag to selected entries               |
  | -   | remove a specific tag from selected entries          |

#+BEGIN_SRC emacs-lisp
;; Set a global binding to call elfeed
(global-set-key (kbd "C-x w") 'elfeed)

;; Using elfeed-org to manage the feeds instead of the default from elfeed.
;; Elfeed-org is more flexible and easy to use.
;; Load elfeed-org
(require 'elfeed-org)

;; Initialize elfeed-org
;; This hooks up elfeed-org to read the configuration when elfeed
;; is started with =M-x elfeed=
(elfeed-org)

;; Optionally specify a number of files containing elfeed
;; configuration. If not set then the location below is used.
;; Note: The customize interface is also supported.
(setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
#+END_SRC

* Programming
** Python
   For setting a correct Python environment, first install these Python programs
   from the shell through pip:
   > pip install elpy epc jedi rope ipython (and maybe virtualenv)

*** Elpy
  Using elpy, jedi, rope, company-mode, for Python development.
  *Attention:* For this setting to work, package exec-path-from-shell has to be installed,
  otherwise Emacs GUI won't see the PATH set on terminal.
  site: https://github.com/purcell/exec-path-from-shell

#+BEGIN_SRC emacs-lisp

  ;; Setting Python path allowing elpy to find it
  ;(setenv "PYTHONPATH" "/usr/local/bin/python")

  ;; Enable elpy
  (when (require 'elpy nil t)
    (elpy-enable))

#+END_SRC

*** Jedi
   Jedi offers very nice auto completion for python-mode. It aims at helping
   Python coding in a non-destructive way. It also helps to find information
   about Python objects, such as docstring, function arguments and code
   location.

#+BEGIN_SRC emacs-lisp
  ;; (require 'jedi)
  ;; (add-hook 'python-mode-hook 'jedi:setup)
  ;; (setq jedi:complete-on-dot t)
  ;; (add-hook 'python-mode-hook 'jedi:ac-setup)

  ;; ;(autoload 'jedi:setup "jedi" nil t)

  ;; ;; Default keyboard shortcuts
  ;; (setq jedi:setup-keys t)

  ;; ;; To complete on the “.” (when type some object or module name and a “.” it gives all the possible attributes/submodules/methods/etc)
  ;; (setq jedi:complete-on-dot t)

  ;; ;; Setting Jedi as elpy backend
  ;; (setq elpy-rpc-backend "jedi")

  ;; ;; Fixing a key binding bug in elpy
  ;; (define-key yas-minor-mode-map (kbd "C-c k") 'yas-expand)

  ;; ;; Type:
  ;; ;;     M-x package-install RET jedi RET
  ;; ;;     M-x jedi:install-server RET
  ;; ;; Then open Python file.

#+END_SRC

*** iPython
   Interactive Python shell.
   site: ipython.org

   Using also ob-ipython that is the org-babel integration with IPython for evaluation.
   source: https://github.com/gregsexton/ob-ipython

#+BEGIN_SRC emacs-lisp
  (require 'ob-ipython)

;; ob-ipython configuration for work with org-mode

;; display/update images in the buffer after I evaluate
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

  ;(elpy-use-ipython)

  ;; Make Elpy work well with org-mode
  ;; check: https://github.com/jorgenschaefer/elpy/issues/191
  ;; https://github.com/jorgenschaefer/elpy/wiki/FAQ#q-how-do-i-make-elpy-work-well-with-org-mode
  ;; http://lists.gnu.org/archive/html/emacs-orgmode/2013-12/msg00063.html
  ;; https://lists.gnu.org/archive/html/emacs-orgmode/2015-01/msg00578.html

;;  (setq org-babel-python-command "ipython --pylab=osx --pdb --nosep
;;                        --classic --no-banner --no-confirm-exit")
;;
;;  (defadvice org-babel-python-evaluate
;;      (around org-python-use-cpaste
;;              (session body &optional result-type result-params preamble) activate)
;;      "Add a %cpaste and '--' to the body, so that ipython does the right thing."
;;      (setq body (concat "%cpaste -q\n" body "\n--\n"))
;;      ad-do-it
;;      (if (stringp ad-return-value)
;;          (setq ad-return-value (replace-regexp-in-string "\\(^Pasting code; enter '--' alone on the line to stop or use Ctrl-D\.[\r\n]:*\\)" ""
;;                                                          ad-return-value))))
;;
;;  (setq python-shell-interpreter "ipython"
;;        python-shell-interpreter-args "--pylab=osx --pdb --nosep --classic --no-banner"
;;        python-shell-prompt-regexp ">>> "
;;        python-shell-prompt-output-regexp ""
;;        python-shell-completion-setup-code "from IPython.core.completerlib import module_completion"
;;        python-shell-completion-module-string-code "';'.join(module_completion('''%s'''))\n"
;;        python-shell-completion-string-code "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"
;;        )
#+END_SRC

** ESS
  Emacs Speaks Statistics works with R.  Together with the following lines in
  this present file, a .Rprofile file has to be created contend:

 =========================
  ## This avoids having to interactively select the mirror
  ## during each R session.
  ## Change to reflect the closest CRAN mirror to you.
  options(repos=c( "http://cran.mirror.garr.it/mirrors/CRAN/",
                   "http://cran.r-project.org"))

  ## set locale to utf-8
  Sys.setenv(LANG="en_US.UTF-8")
 =========================

  To install R packages from within Emacs: =C-c C-e i=. This is necessary in
  order to install package lintr in case Emacs complains about it.

#+BEGIN_SRC emacs-lisp
  (setq ess-ask-for-ess-directory nil)
  (setq inferior-R-program-name "/usr/local/bin/R")
  (setq ess-local-process-name "R")
  (setq ansi-color-for-comint-mode 'filter)
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)
  (setq ess-eval-visibly nil)
  (require 'ess-site)
#+END_SRC
* Custom Functions
** Text line wraps at column 80

#+begin_src emacs-lisp
  (setq-default fill-column 80) ;; set 80 column display as default
#+end_src

** Remember the cursor position on file
#+begin_src emacs-lisp
  (require 'saveplace)
  (setq save-place-file (concat user-emacs-directory "saveplace.el"))
  (setq-default save-place t)
#+end_src

** Select the line
   Custom function select-current-line selects the line (keybinding .l)

#+begin_src emacs-lisp
 (defun select-current-line ()
   "Selects the current line"
   (interactive)
   (end-of-line)
   (push-mark (line-beginning-position) nil t))

;   (key-chord-define-global ".l" 'select-current-line)
#+end_src

** Insert line above
   Custom function line-above inserts a line above point (keybinding .a)

#+begin_src emacs-lisp
 (defun line-above()
   "Pastes line above"
   (interactive)
   (move-beginning-of-line nil)
   (newline-and-indent)
   (forward-line -1)
   (indent-according-to-mode))

;   (key-chord-define-global ".a" 'line-above)
#+end_src

** Cut line or region
   Custom function cute-line-or-region cuts the current line if no selection is made or the selected region (keybinding .x)

#+begin_src emacs-lisp
 (defun cut-line-or-region()
   ""
   (interactive)
   (if (region-active-p)
       (kill-region (region-beginning) (region-end))
     (kill-region (line-beginning-position) (line-beginning-position 2))))

;   (key-chord-define-global ".x" 'cut-line-or-region)
#+end_src

** Copy line or region
   Custom function copy-line-or-region copies the current line if no selection is made or the selected region (keybinding .c)

#+begin_src emacs-lisp
 (defun copy-line-or-region()
   ""
   (interactive)
   (if (region-active-p)
       (kill-ring-save (region-beginning) (region-end))
     (kill-ring-save (line-beginning-position) (line-beginning-position 2))))

;   (key-chord-define-global ".c" 'copy-line-or-region)
#+end_src

** Duplicate line
   Custom function duplicates the current line or region (taken from Tuxicity) (keybinding .d)

#+begin_src emacs-lisp
 (defun duplicate-current-line-or-region (arg)
   "Duplicates the current line or region ARG times.
 If there's no region, the current line will be duplicated. However, if
 there's a region, all lines that region covers will be duplicated."
   (interactive "p")
   (let (beg end (origin (point)))
     (if (and mark-active (> (point) (mark)))
         (exchange-point-and-mark))
     (setq beg (line-beginning-position))
     (if mark-active
         (exchange-point-and-mark))
     (setq end (line-end-position))
     (let ((region (buffer-substring-no-properties beg end)))
       (dotimes (i arg)
         (goto-char end)
         (newline)
         (beginning-of-visual-line)
         (insert region)
         (setq end (point)))
       (goto-char (+ origin (* (length region) arg) arg)))))

;   (key-chord-define-global ".d" 'duplicate-current-line-or-region)
#+end_src

* Cheatsheets
** Default and customized commands

 | Keybinding  | Description                                                 |
 |-------------+-------------------------------------------------------------|
 | C-h i       | Main help info                                              |
 | C-h k       | Shows help about keys                                       |
 | C-h f       | Show help about functions                                   |
 | C-x C-e     | Evaluate before point                                       |
 |-------------+-------------------------------------------------------------|
 | C-x C-f     | Open file                                                   |
 | C-x C-s     | Save current buffer                                         |
 | C-x C-w     | Save buffer to a different file (Save as)                   |
 |-------------+-------------------------------------------------------------|
 | C-f         | Move forward by caracter                                    |
 | M-f         | Move forward by word                                        |
 | C-b         | Mobe back by caracter                                       |
 | M-b         | Move back by word                                           |
 | C-p         | Move to previous line                                       |
 | C-n         | Move to next line                                           |
 | M-v         | Page up                                                     |
 | C-v         | Page down                                                   |
 | M-<         | Move to the beginning of the buffer                         |
 | M->         | Move to the end of the buffer                               |
 |-------------+-------------------------------------------------------------|
 | C-M-f       | Move forward to next balanced bracket                       |
 | C-M-b       | Move back to next balanced bracket                          |
 | C-M-k       | Kill text until the next balanced bracket                   |
 | C-M-t       | Transpose expressions (switch)                              |
 | C-M-SPC     | Select text until next balanced bracket                     |
 |-------------+-------------------------------------------------------------|
 | C-d         | Kill a character at point                                   |
 | C-S-DEL     | Kill entire line                                            |
 | M-d         | Kill forward to the end of a word from current point        |
 | M-DEL       | Kill backward to the beginning of a word from current point |
 | M-\         | Kill all spaces at point                                    |
 | M-SPC       | Kill all spaces except one at point                         |
 | C-k         | Kill to the end of line                                     |
 | M-k         | Kill a sentence                                             |
 | C-w         | Cut selection to kill-ring                                  |
 | M-w         | Copy selection to kill-ring                                 |
 | C-y         | Paste last killed item                                      |
 | M-y         | Load helm-show-kill-ring (M-y remapped)                     |
 |-------------+-------------------------------------------------------------|
 | M-;         | Automatic indentation                                       |
 | uu / C-_    | Undo                                                        |
 | M-%         | Search and replace                                          |
 |-------------+-------------------------------------------------------------|
 | C-x 0       | Close the current window                                    |
 | C-x 1       | Close all windows, except the current one                   |
 | C-x 2       | Create a horizontal window                                  |
 | C-x 3       | Create a vertical window                                    |
 | C-x o       | Move cursor to next window                                  |
 | C-x C-b     | Show buffers list                                           |
 | C-x b       | Switch to especified buffer                                 |
 | C-x k       | Kill the current buffer                                     |
 |-------------+-------------------------------------------------------------|
 | C-SPC       | Start selection                                             |
 | C-x x       | Move between start and end mark selection                   |
 | C-SPC C-SPC | Create mark (used as temporary bookmark)                    |
 | C-u C-SPC   | Go back to the last mark created                            |
 | C-x h       | Select the whole buffer                                     |
 | C-=         | Load expand-region plugin (= expands,- contracts, 0 resets) |
 |-------------+-------------------------------------------------------------|
 | .l          | Select current line                                         |
 | .a          | Insert line above current line                              |
 | .x          | Cut current line or selected region                         |
 | .c          | Copy current line or selected region                        |
 | .d          | Duplicate current line or selected region                   |
 | jj          | Ace-jump-word-mode to letter anywhere                       |
 | jl          | Ace-jump-line-mode to beginning of lines                    |
 |-------------+-------------------------------------------------------------|
 | C-x r SPC   | Mark point in the register                                  |
 | C-s r j     | Jump back to mark contained in register                     |
 | C-x r s     | Save text to register                                       |
 | C-x r i     | Insert text from register at point                          |
 |             | Append text to saved register (M-x append-to-register)      |
 | C-x r m     | Create a bookmark to the file                               |
 | C-x r b     | Jump back to bookmark                                       |
 | C-x r l     | List all saved bookmark                                     |
 |-------------+-------------------------------------------------------------|
 | C-x d       | Start Dired                                                 |
 | C-x 4 d     | Stard Dired in another window                               |
 | n           | Move to next entry below point                              |
 | p           | Move to previous entry below poing                          |
 | j           | Jump to file specified                                      |
 | +           | Create a new directory                                      |
 | f / e / RET | Open current file at point.                                 |
 | o           | Open file at point in another window.                       |
 | v           | Open file for read only.                                    |
 | S-6         | Go up one level                                             |
 | d           | Mark file for deletion                                      |
 | R           | Rename file                                                 |
 | r           | Move file                                                   |
 | m           | Mark files for future operation                             |
 | C           | Copy marked files to another directory                      |
 | u           | Undo marks inserted on file                                 |
 | %           | Press before command allows to insert expressions (eg. %d)  |
 | x           | Execute commands set by marks inserted                      |
 | C-s         | Find text using Isearch                                     |
 |-------------+-------------------------------------------------------------|

** Projectile Cheatsheet

| Key Binding | Command                                     | Description                                                  |
|-------------+---------------------------------------------+--------------------------------------------------------------|
| C-c p h     | helm-projectile                             | Helm interface to projectile                                 |
| C-c p p     | helm-projectile-switch-project              | Switches to another projectile project                       |
| C-c p f     | helm-projectile-find-file                   | Lists all files in a project                                 |
| C-c p F     | helm-projectile-find-file-in-known-projects | Find file in all known projects                              |
| C-c p g     | helm-projectile-find-file-dwim              | Find file based on context at point                          |
| C-c p d     | helm-projectile-find-dir                    | Lists available directories in current project               |
| C-c p e     | helm-projectile-recentf                     | Lists recently opened files in current project               |
| C-c p a     | helm-projectile-find-other-file             | Switch between files with same name but different extensions |
| C-c p i     | projectile-invalidate-cache                 | Invalidate cache                                             |
| C-c p z     | projectile-cache-current-file               | Add the file of current selected buffer to cache             |
| C-c p b     | helm-projectile-switch-to-buffer            | List all open buffers in current project                     |
| C-c p s g   | helm-projectile-grep                        | Searches for symbol starting from project root               |
| C-c p s a   | helm-projectile-ack                         | Same as above but using ack                                  |
| C-c p s s   | helm-projectile-ag                          | Same as above but using ag                                   |

** Helm Cheatsheet

| Key Binding | Command                         | Description                                                                 |
|-------------+---------------------------------+-----------------------------------------------------------------------------|
| M-x         | helm-M-x                        | List commands                                                               |
| M-y         | helm-show-kill-ring             | Shows the content of the kill ring                                          |
| C-x b       | helm-mini                       | Shows open buffers, recently opened files                                   |
| C-x C-f     | helm-find-files                 | The helm version for find-file                                              |
| C-s         | helm-ff-run-grep                | Run grep from within helm-find-files                                        |
| C-c h i     | helm-semantic-or-imenu          | Helm interface to semantic/imenu                                            |
| C-c h m     | helm-man-woman                  | Jump to any man entry                                                       |
| C-c h /     | helm-find                       | Helm interface to find                                                      |
| C-c h l     | helm-locate                     | Helm interface to locate                                                    |
| C-c h o     | helm-occur                      | Similar to occur                                                            |
| C-c h a     | helm-apropos                    | Describes commands, functions, variables, …                                 |
| C-c h h g   | helm-info-gnus                  |                                                                             |
| C-c h h i   | helm-info-at-point              |                                                                             |
| C-c h h r   | helm-info-emacs                 |                                                                             |
| C-c h <tab> | helm-lisp-completion-at-point   | Provides a list of available functions                                      |
| C-c h b     | helm-resume                     | Resumes a previous helm session                                             |
| C-h SPC     | helm-all-mark-rings             | Views content of local and global mark rings                                |
| C-c h r     | helm-regex                      | Visualizes regex matches                                                    |
| C-c h x     | helm-register                   | Shows content of registers                                                  |
| C-c h t     | helm-top                        | Helm interface to top                                                       |
| C-c h s     | helm-surfraw                    | Command line interface to many web search engines                           |
| C-c h g     | helm-google-suggest             | Interactively enter search terms and get results from Google in helm buffer |
| C-c h c     | helm-color                      | Lists all available faces                                                   |
| C-c h M-:   | helm-eval-expression-with-eldoc | Get instant results for emacs lisp expressions in the helm buffer           |
| C-c h C-,   | helm-calcul-expression          | Helm interface to calc                                                      |
| C-c C-l     | helm-eshell-history             | Interface to eshell history                                                 |
| C-c C-l     | helm-comint-input-ring          | Interface to shell history                                                  |
| C-c C-l     | helm-mini-buffer-history        | Interface to mini-buffer history                                            |

** Python

| Key Binding | Command    | Description                          |
|-------------+------------+--------------------------------------|
| C-c k       | yas-expand | Offer Yasnippet's completion         |
| C-c o       | iedit-mode | Edit multiple regions simultaneously |
|             |            |                                      |
